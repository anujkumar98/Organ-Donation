/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface.DoctorRole;

import userInterface.HospitalAdminWorkArea.*;
import Business.Employee.Employee;
import Business.Patient.PatientVisit;
import DatabaseUtility.DatabaseHandleHospitalRoles;
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class DoctorManageReceiverJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorManageReceiverJPanel
     */
    private static Employee emp;
    Boolean selected;
    int adminId;
    DatabaseHandleHospitalRoles dbCon=new DatabaseHandleHospitalRoles();
    public DoctorManageReceiverJPanel(Employee e) {
        initComponents();
        this.emp=e;
        selected=false;
        adminId=emp.getId();
        populateTable(dbCon.fetchDoctorDonorRevicerList(adminId,"Reciver"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableReceiverDetails = new javax.swing.JTable();
        jButtonViewReceiverInfo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextReceviersName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButtonReceiverReportToAdmin = new javax.swing.JButton();
        jCheckBoxIntestineD = new javax.swing.JCheckBox();
        jCheckBoxHeartD = new javax.swing.JCheckBox();
        jCheckBoxPancreasD = new javax.swing.JCheckBox();
        jCheckBoxLiverD = new javax.swing.JCheckBox();
        jCheckBoxKidneyD = new javax.swing.JCheckBox();
        jCheckBoxLungD = new javax.swing.JCheckBox();

        jTableReceiverDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "PATIENT_RECIEVER ID", "RECEIVER NAME", "RECEIVER AGE", "DATE", "ORGAN NAME"
            }
        ));
        jScrollPane1.setViewportView(jTableReceiverDetails);

        jButtonViewReceiverInfo.setText("VIEW RECEIVER");
        jButtonViewReceiverInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewReceiverInfoActionPerformed(evt);
            }
        });

        jLabel1.setText("RECEIVER NAME");

        jLabel3.setText("SELECT ORGAN:");

        jButtonReceiverReportToAdmin.setText("SEND REPORT TO ADMIN");
        jButtonReceiverReportToAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReceiverReportToAdminActionPerformed(evt);
            }
        });

        jCheckBoxIntestineD.setText("INTESTINES");

        jCheckBoxHeartD.setText("HEART");

        jCheckBoxPancreasD.setText("PANCREAS");

        jCheckBoxLiverD.setText("LIVER");

        jCheckBoxKidneyD.setText("KIDNEY");

        jCheckBoxLungD.setText("LUNG");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(477, 477, 477)
                        .addComponent(jButtonViewReceiverInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(7, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jTextReceviersName, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxIntestineD)
                            .addComponent(jCheckBoxLiverD)
                            .addComponent(jCheckBoxKidneyD))
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxLungD)
                            .addComponent(jCheckBoxPancreasD)
                            .addComponent(jCheckBoxHeartD))))
                .addGap(323, 323, 323))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(603, 603, 603)
                .addComponent(jButtonReceiverReportToAdmin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(415, 415, 415))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(277, 277, 277)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jButtonViewReceiverInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextReceviersName, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxLungD)
                            .addComponent(jCheckBoxKidneyD, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxIntestineD)
                            .addComponent(jCheckBoxHeartD))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBoxPancreasD)
                            .addComponent(jCheckBoxLiverD))))
                .addGap(46, 46, 46)
                .addComponent(jButtonReceiverReportToAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonViewReceiverInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewReceiverInfoActionPerformed
        // TODO add your handling code here:
        int selectedIndex=jTableReceiverDetails.getSelectedRow();
            if (selectedIndex != -1){
            int id=Integer.parseInt(jTableReceiverDetails.getValueAt(selectedIndex, 0).toString());
            jTextReceviersName.setText(jTableReceiverDetails.getValueAt(selectedIndex, 1).toString());
            jTextReceviersName.setEditable(false);
        }
            else{
                JOptionPane.showMessageDialog(this, "Please select the row");
            }
    }//GEN-LAST:event_jButtonViewReceiverInfoActionPerformed

    private void jButtonReceiverReportToAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReceiverReportToAdminActionPerformed
        // TODO add your handling code here:
        if (selected){
          int selectedIndex=jTableReceiverDetails.getSelectedRow();
            if(selectedIndex != -1){
                int id=Integer.parseInt(jTableReceiverDetails.getValueAt(selectedIndex, 0).toString());
                jTextReceviersName.setText(jTableReceiverDetails.getValueAt(selectedIndex, 1).toString());
                jTextReceviersName.setEditable(false);
                int [] organList = new int [6];
                Dictionary organdict = new Hashtable();
                if(jCheckBoxKidneyD.isSelected())
                    organdict.put("Kidney","Kidney");
                if(jCheckBoxIntestineD.isSelected())
                    organdict.put("Intestine","Intestine");
                if(jCheckBoxLiverD.isSelected())
                    organdict.put("Liver","Liver");
                if(jCheckBoxLungD.isSelected())
                    organdict.put("Lungs","Lungs");
                if(jCheckBoxHeartD.isSelected())
                   organdict.put("Heart","Heart");
                if(jCheckBoxPancreasD.isSelected())
                    organdict.put("Pancreas","Pancreas");
                int count =organdict.size();
                if (count ==0 ){
                    JOptionPane.showMessageDialog(this, "Please select atleast one organ");
                    return;
                }
                for (Enumeration i = organdict.elements(); i.hasMoreElements();)
                {
                    System.out.println("Value in Dictionary : " + i.nextElement());
                }
                if (count==1){ 
                    String organ="";
                    for (Enumeration i = organdict.elements(); i.hasMoreElements();)
                    {
                        organ=i.nextElement().toString();
                    }
                   Boolean status = dbCon.updateReciverDonorList(id, organ);
                   if(status){
                       JOptionPane.showMessageDialog(this, "Sent to admin");
                       clearFields();
                       populateTable(dbCon.fetchDoctorDonorRevicerList(adminId,"Reciver"));
                       return;
                   }
                }
                else{
                    Boolean status=false;
                    String organ="";
                    for (Enumeration i = organdict.elements(); i.hasMoreElements();){
                        organ=i.nextElement().toString();
                        status=dbCon.updateReciverDonorList(id, organ);
                        break;
                                
                    }
                    organdict.remove(organ);
                    for (Enumeration i = organdict.elements(); i.hasMoreElements();){
                        organ=i.nextElement().toString();
                        status=dbCon.populateReciverDonorList(id, organ,"Reciver");        
                    }
                    if (status){
                        JOptionPane.showMessageDialog(this, "Sent to admin");
                        clearFields();
                        populateTable(dbCon.fetchDoctorDonorRevicerList(adminId,"Reciver"));
                       return;
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Error in adding to list");
                    }
                }
                
            }
            else{
                JOptionPane.showMessageDialog(this, "Please select the row");
            }  
        }
        clearFields();
        selected=false;
        
    }//GEN-LAST:event_jButtonReceiverReportToAdminActionPerformed
void clearFields(){
    jTextReceviersName.setText("");
    jCheckBoxKidneyD.setSelected(false);
    jCheckBoxIntestineD.setSelected(false);
    jCheckBoxLiverD.setSelected(false);
    jCheckBoxLungD.setSelected(false);
    jCheckBoxHeartD.setSelected(false);
    jCheckBoxPancreasD.setSelected(false);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonReceiverReportToAdmin;
    private javax.swing.JButton jButtonViewReceiverInfo;
    private javax.swing.JCheckBox jCheckBoxHeartD;
    private javax.swing.JCheckBox jCheckBoxIntestineD;
    private javax.swing.JCheckBox jCheckBoxKidneyD;
    private javax.swing.JCheckBox jCheckBoxLiverD;
    private javax.swing.JCheckBox jCheckBoxLungD;
    private javax.swing.JCheckBox jCheckBoxPancreasD;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableReceiverDetails;
    private javax.swing.JTextField jTextReceviersName;
    // End of variables declaration//GEN-END:variables
private void populateTable(ArrayList <PatientVisit> patientList) {
        DefaultTableModel model=(DefaultTableModel) jTableReceiverDetails.getModel();
        model.setRowCount(0);
        for (PatientVisit pv:patientList){
            Object[] row =new Object[7];
            row[0]=pv.getId();
            row[1]=pv.getName();
            row[2]=pv.getAge();
            row[3]=pv.getDate();
            if (pv.getOrgan() == null){
                row[4]="Select Organ";
            }
            else{
                row[4]=pv.getOrgan();
            }
            model.addRow(row);
        }
    }
}
